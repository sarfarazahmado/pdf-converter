const express = require('express');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { PDFDocument, rgb } = require('pdf-lib');
const mime = require('mime-types');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.static('public'));

// Multer upload (temp storage in memory for simplicity)
const upload = multer({ storage: multer.memoryStorage() });

app.get('/health', (_, res) => res.json({ ok: true }));

// Convert a single image (jpg/png) to a single-page PDF
app.post('/api/convert/image-to-pdf', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ error: 'No file uploaded' });

    const mimeType = req.file.mimetype;
    if (!['image/jpeg', 'image/png', 'image/webp'].includes(mimeType)) {
      return res.status(400).json({ error: 'Only JPG/PNG/WEBP images are supported' });
    }

    // Create a new PDF
    const pdfDoc = await PDFDocument.create();
    const imageBytes = req.file.buffer;

    let image;
    if (mimeType === 'image/png') {
      image = await pdfDoc.embedPng(imageBytes);
    } else {
      image = await pdfDoc.embedJpg(imageBytes);
    }

    const imgWidth = image.width;
    const imgHeight = image.height;

    const page = pdfDoc.addPage([imgWidth, imgHeight]);
    page.drawImage(image, {
      x: 0,
      y: 0,
      width: imgWidth,
      height: imgHeight
    });

    // Footer text
    page.drawText('Generated by PDF Converter MVP', {
      x: 16,
      y: 16,
      size: 10,
      color: rgb(0.3, 0.3, 0.3)
    });

    const pdfBytes = await pdfDoc.save();
    const downloadName = (req.file.originalname.replace(/\.[^.]+$/, '') || 'image') + '.pdf';

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${downloadName}"`);
    return res.send(Buffer.from(pdfBytes));
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Failed to convert image to PDF' });
  }
});

// Echo-upload for PDFs (just returns the same file as download)
// Useful as a placeholder for later tools (compress, merge, etc.)
app.post('/api/pdf/echo', upload.single('pdf'), async (req, res) => {
  try {
    if (!req.file || req.file.mimetype !== 'application/pdf') {
      return res.status(400).json({ error: 'Please upload a PDF file' });
    }
    const downloadName = req.file.originalname || 'file.pdf';
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${downloadName}"`);
    return res.send(req.file.buffer);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Failed to process PDF' });
  }
});

app.listen(PORT, () => {
  console.log(`âœ… Server running on http://localhost:${PORT}`);
});
